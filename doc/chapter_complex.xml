<Chapter Label="Complexes">
<Heading>Chain complexes</Heading>

TODO: introduction

<Section Label="Complex categories">
<Heading>Categories</Heading>

<ManSection>
<Filt Type="Category" Name="IsComplex"/>
<Description>
The category for chain complexes.
</Description>
</ManSection>

<ManSection>
<Filt Type="Category" Name="IsZeroComplex"/>
<Description>
Category for zero complexes, subcategory of <Ref Filt="IsComplex"/>.
</Description>
</ManSection>

</Section>


<Section Label="Complex constructors">
<Heading>Constructors</Heading>

The most general constructor for complexes is the function
<Ref Func="Complex"/>.  In addition to this, there are constructors
for common special cases:
<List>
<Item><Ref Func="ZeroComplex"/></Item>
<Item><Ref Func="StalkComplex"/></Item>
<Item><Ref Func="FiniteComplex"/></Item>
<Item><Ref Func="ShortExactSequence"/></Item>
<Item><Ref Oper="ComplexByDifferentialList" /></Item>
</List>

<ManSection>
<Func Name="Complex"
      Arg="cat, baseDegree, middle, positive, negative"/>
<Returns>A newly created chain complex</Returns>
<Description>
The first argument, <Arg>cat</Arg> is an <Ref Filt="IsAbelianCat"/> object
describing the category to create a chain complex over.<P/>

The rest of the arguments describe the differentials of the complex.
These are divided into three parts: one finite (<Q>middle</Q>) and two
infinite (<Q>positive</Q> and <Q>negative</Q>).  The positive part
contains all differentials in degrees higher than those in the middle
part, and the negative part contains all differentials in degrees
lower than those in the middle part.  (The middle part may be placed
anywhere, so the positive part can -- despite its name -- contain some
differentials of negative degree.  Conversely, the negative part can
contain some differentials of positive degree.)<P/>

The argument <Arg>middle</Arg> is a list containing the differentials
for the middle part.  The argument <Arg>baseDegree</Arg> gives the
degree of the first differential in this list.  The second
differential is placed in degree <M><Arg>baseDegree</Arg>+1</M>, and
so on.  Thus, the middle part consists of the degrees
<Display>
<Arg>baseDegree</Arg>,\quad
<Arg>baseDegree</Arg> + 1,\quad
\ldots\quad
<Arg>baseDegree</Arg> + \text{Length}(<Arg>middle</Arg>).
</Display>

Each of the arguments <Arg>positive</Arg> and <Arg>negative</Arg> can
be one of the following:
<List>
<Item>The string <Code>"zero"</Code>, meaning that the part contains
  only zero objects and zero morphisms.</Item>
<Item>A list of the form <Code>[ "repeat", L ]</Code>,
  where <Code>L</Code> is a list of morphisms.  The part will contain
  the differentials in <Code>L</Code> repeated infinitely many times.
  The convention for the order of elements in <Code>L</Code> is
  that <Code>L[1]</Code> is the differential which is closest to the
  middle part, and <Code>L[Length(L)]</Code> is farthest away from the
  middle part.</Item>
<Item>A list of the form <Code>[ "pos", f ]</Code> or <Code>[ "pos",
  f, store ]</Code>, where <Code>f</Code> is a function of two
  arguments, and <Code>store</Code> (if included) is a boolean.  The
  function <Code>f</Code> is used to compute the differentials in this
  part.  The function <Code>f</Code> is not called immediately by
  the <Code>Complex</Code> constructor, but will be called later as
  the differentials in this part are needed.  The function
  call <Code>f(C,i)</Code> (where <Code>C</Code> is the complex
  and <Code>i</Code> an integer) should produce the differential in
  degree <Code>i</Code>.  The function may use <Code>C</Code> to look
  up other differentials in the complex, as long as this does not
  cause an infinite loop.  If <Code>store</Code> is <Code>true</Code>
  (or not specified), each computed differential is stored, and they
  are computed in order from the one closest to the middle part,
  regardless of which order they are requested in.</Item>
<Item>A list of the form <Code>[ "next", f, init ]</Code>,
  where <Code>f</Code> is a function of one argument,
  and <Code>init</Code> is a morphism.  The function <Code>f</Code> is
  used to compute the differentials in this part.  For the first
  differential in the part (that is, the one closest to the middle
  part), <Code>f</Code> is called with <Code>init</Code> as
  argument.  For the next differential, <Code>f</Code> is called with
  the first differential as argument, and so on.  Thus, the
  differentials are
  <Display>
    f(\text{init}),\quad
    f^2(\text{init}),\quad
    f^3(\text{init}),\quad \ldots
  </Display>
  Each differential is stored when it has been computed.
</Item>
</List>
</Description>
</ManSection>

<ManSection>
<Func Name="ZeroComplex" Arg="cat"/>
<Returns>A newly created zero complex</Returns>
<Description>
This function creates a zero complex (a complex consisting of only
zero objects and zero morphisms) over the category described by the
<Ref Filt="IsAbelianCat"/> object <Arg>cat</Arg>.
</Description>
</ManSection>

<ManSection>
<Func Name="FiniteComplex" Arg="cat, baseDegree, differentials"/>
<Returns>A newly created complex</Returns>
<Description>
This function creates a complex where all but finitely many objects
are the zero object.<P/>

The argument <Arg>cat</Arg> is an <Ref Filt="IsAbelianCat"/> object
describing the category to create a chain complex over.<P/>

The argument <Arg>differentials</Arg> is a list of morphisms.  The
argument <Arg>baseDegree</Arg> gives the degree for the first
differential in this list.  The subsequent differentials are placed in
degrees <M><Arg>baseDegree</Arg>+1</M>, and so on.<P/>

This means that the <Arg>differentials</Arg> argument specifies the
differentials in degrees
<Display>
<Arg>baseDegree</Arg>,\quad
<Arg>baseDegree</Arg> + 1,\quad
\ldots \quad
<Arg>baseDegree</Arg> + \text{Length}(<Arg>differentials</Arg>);
</Display>
and thus implicitly the objects in degrees
<Display>
<Arg>baseDegree</Arg> - 1,\quad
<Arg>baseDegree</Arg>,\quad
\ldots \quad
<Arg>baseDegree</Arg> + \text{Length}(<Arg>differentials</Arg>).
</Display>
All other objects in the complex are zero.
</Description>
</ManSection>

<Example><![CDATA[
gap> # L, M and N are modules over the same algebra A
gap> # cat is the category mod A
gap> # f: L --> M and g: M --> N maps
gap> C := FiniteComplex(cat, 1, [g,f]);
0 -> 2:(1,0) -> 1:(2,2) -> 0:(1,1) -> 0 ]]>
</Example>

<ManSection>
  <Func Name="StalkComplex" Arg="cat, obj, degree" />
  <Description>
    Arguments: <Arg>cat</Arg> -- a category, <Arg>obj</Arg> -- an
    object in <Arg>cat</Arg>, <Arg>degree</Arg> -- the
    degree <Arg>obj</Arg> should be placed in.<Br />
  </Description>
  <Returns>a newly created complex.
  </Returns>
  <Description>
    The new complex is a stalk complex with <Arg>obj</Arg> in
    position <Arg>degree</Arg>, and zero elsewhere.
  </Description>
</ManSection>

<Example><![CDATA[
gap> Ms := StalkComplex(cat, M, 3);
0 -> 3:(2,2) -> 0 ]]>
</Example>

<ManSection>
  <Func Name="ShortExactSequence" Arg="cat, f, g" />
  <Description>
    Arguments: <Arg>cat</Arg> -- a category, <Arg>f</Arg>
    and <Arg>g</Arg> -- maps in <Arg>cat</Arg>,
    where <Arg>f</Arg>: <Math>A \rightarrow B</Math>
    and <Arg>g</Arg>: <Math>B \rightarrow C</Math>.<Br />
  </Description>
  <Returns>a newly created complex.
  </Returns>
  <Description>If the sequence <Math>0 \rightarrow A \rightarrow B \rightarrow
  C \rightarrow 0</Math> is exact, this complex  (with <Math>B</Math>
  in degree 0) is returned.
  </Description>
</ManSection>

<Example><![CDATA[
gap> ses := ShortExactSequence(cat, f, g);
0 -> 1:(0,0,1,0) -> 0:(0,1,1,1) -> -1:(0,1,0,1) -> 0 ]]>
</Example>

<ManSection>
  <Oper Name="ComplexByDifferentialList" Arg="cat, differentials" />
  <Description>
    Arguments: <A>cat</A> -- an abelian category, <A>differentials</A> -- an infinite list.<Br />
  </Description>
  <Returns>A newly created complex.
  </Returns>
  <Description>
    The <M>i</M>th differential of the returned complex is the value
    at position <M>i</M> of <A>differentials</A>.  Note that this
    operation <E>does not</E> check that this actually gives a complex.
  </Description>
</ManSection>

</Section>


<Section Label="Complex extractors">
<Heading>Extracting information from a complex</Heading>

<ManSection>
  <Attr Name="CatOfComplex" Arg="C"/>
  <Returns>
    The category the objects of the complex <Arg>C</Arg> live in.
  </Returns>
  <Description>
  </Description>
</ManSection>

<ManSection>
  <Oper Name="ObjectOfComplex" Arg="C, i" />
  <Description>
    Arguments: <Arg>C</Arg> -- a complex, <Arg>i</Arg> -- an integer.<Br />
  </Description>
  <Returns>
    The object at position <Arg>i</Arg> in the complex.
  </Returns>
  <Description>
  </Description>
</ManSection>

<ManSection>
  <Oper Name="DifferentialOfComplex" Arg="C, i" />
  <Description>
    Arguments: <Arg>C</Arg> -- a complex, <Arg>i</Arg> -- an integer.<Br />
  </Description>
  <Returns>
    The map in <Arg>C</Arg> between objects at
    positions <Math>i</Math> and <Math>i-1</Math>.
  </Returns>
  <Description>
  </Description>
</ManSection>

<ManSection>
  <Attr Name="DifferentialsOfComplex" Arg="C" />
  <Description>
    Arguments: <Arg>C</Arg> -- a complex<Br />
  </Description>
  <Returns>
    The differentials of the complex, stored as an <C>IsInfList</C>
    object.
  </Returns>
</ManSection>

</Section>

</Chapter>
